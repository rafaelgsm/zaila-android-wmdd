image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail
#  - ls
#  - chmod u+x test.sh
#  - ./test.sh

stages:
  - build
  - test

#You can have this run after the build... Or add commands before...
#testScript:
#  script:
#    - ls
#    - chmod u+x test.sh
#    - ./test.sh

assembleDevelopmentDebug:
  stage: build
  script:
    - ./gradlew assembleDevelopmentDebug
  artifacts:
    paths:
      - app/build/outputs/

#Will run unit tests: (This is based on our flavours)
DevelopmentDebugTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDevelopmentDebug

#For instrumented tests, we should have a device connected:
#./gradlew -Pci --console=plain :app:connectedDevelopmentDebugAndroidTest

